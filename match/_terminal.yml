matches:
# ===== CONFIG =====
# ESPANSO
  - triggers: [";espanso ", ";esp "] # edit espanso config
    replace: "code ~/Library/Application\\ Support/espanso/"
  - triggers: [";espansozip ", ";espzip "] # zip espanso config to Obsidian vault (rm first, as zip cannot track removed files)
    replace: "rm -f ~/Documents/obsidian-vault/files/espanso-mac.zip && (cd ~/Library/Application\\ Support/espanso && zip -r ~/Documents/obsidian-vault/files/espanso-mac.zip .)"
  - triggers: [";espansozipfile ", ";espzipf "] # zip espanso config to ~/Downloads/
    replace: "rm -f ~/Downloads/espanso-mac.zip && (cd ~/Library/Application\\ Support/espanso && zip -r ~/Downloads/espanso-mac.zip .)"
  - triggers: [";espansoupdate ", ";espup "] # unzip espanso config from Obsidian vault
    replace: "unzip -o ~/Documents/obsidian-vault/files/espanso-mac.zip -d ~/Library/Application\\ Support/espanso/"
# ALIASES
  - trigger: ";aliases "
    replace: "code ~/.aliases"
  - trigger: ";aliaseszip " # zip ~/.aliases to Obsidian vault
    replace: "(cd ~ && zip -r ~/Documents/obsidian-vault/files/aliases.zip .aliases)"
  - trigger: ";aliasesupdate " # unzip ~/.aliases from Obsidian vault
    replace: "unzip -o ~/Documents/obsidian-vault/files/aliases.zip -d ~/"
# ZSHRC
  - triggers: [";zshrc ", ";zsh "]
    replace: "code ~/.zshrc"
  - triggers: [";sourcezshrc ", ";source ", ";reload "]
    replace: "source ~/.zshrc"
  - triggers: [";zshrczipwork ", ";zshzipwork "] # zip ~/.zshrc (work) to Obsidian vault
    replace: "(cd ~ && zip -r ~/Documents/obsidian-vault/files/zshrc-work.zip .zshrc)"
  - triggers: [";zshrcupdatework ", ";zshupwork "] # unzip ~/.zshrc (work) from Obsidian vault
    replace: "unzip -o ~/Documents/obsidian-vault/files/zshrc-personal.zip -d ~/"
  - triggers: [";zshrczippersonal ", ";zshzippersonal "] # zip ~/.zshrc (personal) to Obsidian vault
    replace: "(cd ~ && zip -r ~/Documents/obsidian-vault/files/zshrc-personal.zip .zshrc)"
  - triggers: [";zshrcupdatepersonal ", ";zshuppersonal "] # unzip ~/.zshrc (personal) from Obsidian vault
    replace: "unzip -o ~/Documents/obsidian-vault/files/zshrc-personal.zip -d ~/"
# OTHER CONFIG
  - trigger: ";starship "
    replace: "code ~/.config/starship.toml"

# ===== MACOS =====
# APPLICATIONS
  - triggers: [";lsapplications ", ";lsapps "]
    replace: "ls /Applications && find /Applications/* -maxdepth 0 -type d ! -name \"*.app\" -exec sh -c 'echo \"\"; echo \"{}:\"; ls \"{}\"' \\; && echo \"\"; echo \"Homebrew packages:\"; brew list"
  - triggers: [";lsapplicationsnobrew ", ";lsappsnobl "]
    replace: "ls /Applications && find /Applications/* -maxdepth 0 -type d ! -name \"*.app\" -exec sh -c 'echo \"\"; echo \"{}:\"; ls \"{}\"' \\; && echo \"\";"
  - triggers: [";lsapplicationsall ", ";lsappsall "]
    replace: "ls /Applications /System/Applications && find /Applications/* /System/Applications/* -maxdepth 0 -type d ! -name \"*.app\" -exec sh -c 'echo \"\"; echo \"{}:\"; ls \"{}\"\\' \\; && echo \"\"; echo \"Homebrew packages:\"; brew list"
# BREW
  - triggers: [";brewup ", ";bu "]
    replace: "brew update && brew upgrade && brew upgrade --cask"
  - triggers: [";brewlist ", ";bl "]
    replace: "brew list"
  - triggers: [";brewlistversions ", ";blv "]
    replace: "echo \"# Homebrew Packages:\" && brew list --versions | column && echo && echo \"# Homebrew Cask Packages:\" && brew list --cask --versions | column"
# OTHER
  - trigger: ";finder " # open current path in Finder
    replace: "open -a Finder ."
  - triggers: [";removedsstore ", ";cleanup "] # remove .DS_STORE in current dir and subdirs
    replace: "find . -type f -name '*.DS_Store' -ls -delete"

# ===== BASH =====
  - trigger: ";dec " # base64 decode
    replace: "echo -n \"$|$\" | base64 -d"
  - trigger: ";enc " # base64 encode
    replace: "echo -n \"$|$\" | base64"
# ---
  - trigger: ";mdfi " # mdfind file
    replace: "mdfind -name \"$|$\""
  - trigger: ";mdhfi " #mdfind file here
    replace: "mdfind -onlyin . -name \"$|$\""
  - trigger: ";mdfo " # mdfind folder
    replace: "mdfind kind:folder \"$|$\""
  - trigger: ";mdhfo " #mdfind folder here
    replace: "mdfind -onlyin . kind:folder \"$|$\""
  - trigger: ";mdt " # mdfind text
    replace: "mdfind \"$|$\""
  - trigger: ";mdht " # mdfind text here
    replace: "mdfind -onlyin . \"$|$\""
# ---
  - triggers: [";printpath ", ";path "] # PATH environment variables
    replace: "echo -e ${PATH//:/\\\\n}"
  - triggers: [";netstat ", ";ports "] # network ports currently listening for incoming connections
    replace: "netstat -a | grep -i 'listen'"
# ---
  - trigger: ";websitestatus " # check website status
    replace: "curl -Is https://www.$|$ | head -n 1"

# ===== PACKAGES =====
# https://github.com/Canop/broot
  - triggers: [";broot ", ";treee "]
    replace: "br -c :pt"
# https://github.com/ogham/exa
  - triggers: [";exa ", ";lisl "]
    replace: "exa -hla --icons"
  - triggers: [";exatime ", ";list "]
    replace: "exa -hlas time --icons"
# https://github.com/andornaut/keylight
## get IP (e.g. 192.168.1.100) by typing 'keylight' in terminal
  - triggers: [";keylighton ", ";kon "]
    replace: "keylight --host ... --on"
  - triggers: [";keylightoff ", ";koff "]
    replace: "keylight --host ... --off"
# https://github.com/pypa/pip
  - triggers: [";piplist ", ";pipl "]
    replace: "pip list && echo && pip check"
  - triggers: [";pipoutdated ", ";pipout "]
    replace: "pip list --outdated"
  - triggers: [";pipupgrade", ";pipup "]
    replace: "pip install -U "
  - triggers: [";pipupgradepip ", ";pipupp "]
    replace: "pip install -U pip"
# https://github.com/pypa/pipx
  - triggers: [";pipxupgrade ", ";pipxup "]
    replace: "pipx upgrade-all"
# https://github.com/yt-dlp/yt-dlp
  - trigger: ";yt " # download audio
    replace: "yt-dlp --add-metadata --parse-metadata \"%(artists,uploader)l:%(meta_artist)s\" --embed-thumbnail -o \"%(artists,uploader)l - %(title)s.%(ext)s\" "
  - trigger: ";ytm " # extract mp3 from video 
    replace: "yt-dlp --embed-thumbnail --audio-quality 320k --extract-audio --no-part --audio-format mp3 --add-metadata -o \"%(uploader)s - %(title)s.%(ext)s\" "
  - trigger: ";ytmt " # extract mp3 from video section 
    replace: "yt-dlp --embed-thumbnail --audio-quality 320k --extract-audio --no-part --audio-format mp3 --add-metadata --download-sections \"*01:00-02:00\" --force-keyframes-at-cuts -o \"%(uploader)s - %(title)s.%(ext)s\" "
  - trigger: ";ytv " # download video of best quality
    replace: "yt-dlp -f bestvideo -ciw --write-thumbnail -o \"%(uploader)s - %(title)s.%(ext)s\" "
  - trigger: ";ytup " # upgrade yt-dlp
    replace: "pip install --upgrade \"yt-dlp[default]\""
